Go through and make as many possible things 'final' as possible.
 - Make sure certain methods can't be overridden unless you want them to be
 - Mark parameters that don't change as final
 - Mark final classes
Encapsulate collections: http://www.javapractices.com/topic/TopicAction.do?Id=173
Make many things immutable
 - Either make the class final or constructor private
 - Remove the public 'set' methods.  Everything is set in the constructor.
 - Give defensive copies of inner objects that aren't immutable
    - Giving a defensive copy of an enclosed collection is done with Collections.unmodifiableList(yourCollection)
 - make fields final (as an extra precaution)
Tag all Immutable classes as Immutable
DO create 'singleton' instances of the base numeric range and relationship (don't forget to make the object final).
	accomplish this through the factory/builder cache
implement all .equals(), .hash(), and .toString()
All builders have the ability to start creation from an existing object?
Face should not return a NullRelationship in the getRelationships() method.  If it must, it should return an empty list.
New exception setup:
 - build() throws IllegalStateException
 - most other methods throw IllegalParameterException
There is only ONE RelationshipAggregate class
 - It stores the Relationship, the aggregated value, and the relevant rolls
 - The Rollers do the math to calculate the aggregated value itself.